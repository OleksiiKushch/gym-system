package org.example.facade.impl;

import org.apache.commons.lang3.StringUtils;
import org.example.dto.TraineeDto;
import org.example.dto.TrainerDto;
import org.example.entity.Trainee;
import org.example.entity.Trainer;
import org.example.mapper.Mapper;
import org.example.service.TraineeService;
import org.example.service.TrainerService;
import org.example.service.UserService;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import static org.mockito.ArgumentMatchers.anyString;
import static org.mockito.Mockito.never;
import static org.mockito.Mockito.verify;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class DefaultUserFacadeUnitTest {

    private static final String TEST_USERNAME = "John.Doe";
    private static final String TEST_PASSWORD = "password";
    private static final String GENERATED_PASSWORD = "generated_password";

    @InjectMocks
    DefaultUserFacade testInstance;

    @Mock
    UserService userService;
    @Mock
    TraineeService traineeService;
    @Mock
    TrainerService trainerService;
    @Mock
    Mapper<TraineeDto, Trainee> traineeMapper;
    @Mock
    Mapper<TrainerDto, Trainer> trainerMapper;

    @Mock
    TraineeDto traineeDto;
    @Mock
    Trainee trainee;
    @Mock
    TrainerDto trainerDto;
    @Mock
    Trainer trainer;

    @Test
    void shouldRegisterTrainee() {
        setUpTraineeDtoForRegistration();
        when(trainee.getPassword()).thenReturn(TEST_PASSWORD);

        testInstance.registerTrainee(traineeDto);

        verifyRegistrationTrainee();
        verify(trainee).setActive(true);
        verify(userService, never()).generateRandomPassword();
        verify(trainee, never()).setPassword(anyString());
    }

    @Test
    void shouldRegisterTrainee_whenPasswordAutoGeneratedBecauseItsNull() {
        setUpTraineeDtoForRegistration();
        when(trainee.getPassword()).thenReturn(null);
        when(userService.generateRandomPassword()).thenReturn(GENERATED_PASSWORD);

        testInstance.registerTrainee(traineeDto);

        verifyRegistrationTrainee();
        verify(trainee).setActive(true);
        verify(userService).generateRandomPassword();
        verify(trainee).setPassword(GENERATED_PASSWORD);
    }

    @Test
    void shouldRegisterTrainee_whenPasswordAutoGeneratedBecauseItsEmpty() {
        setUpTraineeDtoForRegistration();
        when(trainee.getPassword()).thenReturn(StringUtils.EMPTY);
        when(userService.generateRandomPassword()).thenReturn(GENERATED_PASSWORD);

        testInstance.registerTrainee(traineeDto);

        verifyRegistrationTrainee();
        verify(trainee).setActive(true);
        verify(userService).generateRandomPassword();
        verify(trainee).setPassword(GENERATED_PASSWORD);
    }

    @Test
    void shouldRegisterTrainer() {
        setUpTrainerDtoForRegistration();
        when(trainer.getPassword()).thenReturn(TEST_PASSWORD);

        testInstance.registerTrainer(trainerDto);

        verifyRegistrationTrainer();
        verify(trainer).setActive(true);
        verify(userService, never()).generateRandomPassword();
        verify(trainer, never()).setPassword(anyString());
    }

    @Test
    void shouldRegisterTrainer_whenPasswordAutoGeneratedBecauseItsNull() {
        setUpTrainerDtoForRegistration();
        when(trainer.getPassword()).thenReturn(null);
        when(userService.generateRandomPassword()).thenReturn(GENERATED_PASSWORD);

        testInstance.registerTrainer(trainerDto);

        verifyRegistrationTrainer();
        verify(trainer).setActive(true);
        verify(userService).generateRandomPassword();
        verify(trainer).setPassword(GENERATED_PASSWORD);
    }

    @Test
    void shouldRegisterTrainer_whenPasswordAutoGeneratedBecauseItsEmpty() {
        setUpTrainerDtoForRegistration();
        when(trainer.getPassword()).thenReturn(StringUtils.EMPTY);
        when(userService.generateRandomPassword()).thenReturn(GENERATED_PASSWORD);

        testInstance.registerTrainer(trainerDto);

        verifyRegistrationTrainer();
        verify(trainer).setActive(true);
        verify(userService).generateRandomPassword();
        verify(trainer).setPassword(GENERATED_PASSWORD);
    }

    void setUpTraineeDtoForRegistration() {
        when(traineeMapper.map(traineeDto)).thenReturn(trainee);
        when(userService.calculateUsername(trainee)).thenReturn(TEST_USERNAME);
    }

    void setUpTrainerDtoForRegistration() {
        when(trainerMapper.map(trainerDto)).thenReturn(trainer);
        when(userService.calculateUsername(trainer)).thenReturn(TEST_USERNAME);
    }

    void verifyRegistrationTrainee() {
        verify(trainee).setUsername(TEST_USERNAME);
        verify(traineeService).createTrainee(trainee);
    }

    void verifyRegistrationTrainer() {
        verify(trainer).setUsername(TEST_USERNAME);
        verify(trainerService).createTrainer(trainer);
    }

}